@page "/customers"

@inherits NeocoreComponent

@inject CustomerRepository CustomerRepository
@inject VendorRepository VendorRepository
@inject NavigationManager Nav

<RoleGuard MinimumRole="UserRole.Editor">
    <div class="col col-md-6 me-auto">
        <FilterComponent TEntity="Vendor"
            SelectedId="VendorId"
            Entities="VendorList"
            EntityId="@(v => v.Id)"
            EntityName="@(v => v.Name)"
            OnEntityFilter="UpdateQuery"
            Label="Bought items delivered by:" 
        />
    </div>

    <h3 class="mt-2">
        Customers
        <a href="/customer" class="btn btn-sm ms-2 py-1 btn-success">+ New</a>
    </h3>

    <QuickGrid class="nc-grid" Items="CustomerList.AsQueryable()" Pagination="paginationState">
        <TemplateColumn class="nc-narrow" Title="Id"
                        SortBy="GridSort<Customer>.ByAscending(i => i.Id)">
            <a href="customer/@context.Id">@context.Id</a>
        </TemplateColumn>
        <TemplateColumn Title="Full name" SortBy="GridSort<Customer>.ByAscending(i => i.FullName)">
            @context.FullName
        </TemplateColumn>
        <Paginator State="paginationState" />
    </QuickGrid>
</RoleGuard>

@code {
    private PaginationState paginationState = new() { ItemsPerPage = 10 };

    [Parameter]
    [SupplyParameterFromQuery(Name = "vendor")]
    public int VendorId { get; set; }

    public List<Customer> CustomerList { get; set; } = new();
    public List<Vendor> VendorList { get; set; } = new();

    protected override async Task OnParametersSetAsync()
    {
        if (!IsPrerendering)
        {
            if (VendorList.Count <= 0)
                VendorList = [.. await VendorRepository.FindAll()];

            await UpdateCustomers();
        }

        await base.OnParametersSetAsync();
    }

    private async Task UpdateCustomers()
    {
        CustomerList = VendorId > 0 
            ? [.. await CustomerRepository.FindByVendor(VendorId)]
            : [.. await CustomerRepository.FindAll()];
    }

    public void UpdateQuery(int vendorId)
    {
        Nav.NavigateTo(
            Nav.GetUriWithQueryParameters(
                new Dictionary<string, object?>()
                    {
                        { "vendor", vendorId > 0 ? vendorId : null },
                    }
            )
        );
    }
}
