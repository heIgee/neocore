@page "/items"

@inherits NeocoreComponent

@inject ItemRepository ItemRepository
@inject VendorRepository VendorRepository
@inject NavigationManager NavigationManager

<h4>VENDOR ID: @VendorId</h4>

<div class="col col-md-6 me-auto">
    <FilterComponent 
        TEntity="Vendor" 
        SelectedId="VendorId"
        Entities="Vendors"
        EntityId="@(v => v.Id)"
        EntityName="@(v => v.Name)"
        OnEntityFilter="UpdateQuery"
    />

    <label for="maxPrice">Max price: </label>
    <input class="mt-2 form-control" id="maxPrice" type="text"
        @bind="MaxPrice"
        @bind:event="oninput" 
        @onchange="() => UpdateQuery(VendorId)"
    /> 
</div>

<label for="multipleVendorsCheck">From multiple vendors: </label>
<input class="mt-2 form-checkbox" id="multipleVendorsCheck" type="checkbox"
    @bind="HasMultilpleVendors"
    @bind:event="oninput" 
    @onchange="() => { VendorId = 0; UpdateQuery(VendorId); }"
/> 

<h3 class="mt-2">Items</h3>

<QuickGrid class="nc-grid" Items="ItemList.AsQueryable()" Pagination="paginationState">
    <TemplateColumn class="nc-narrow" Title="Id"
        SortBy="GridSort<Item>.ByAscending(i => i.Id)">
        <a href="item/@context.Id">@context.Id</a>
    </TemplateColumn>

    <PropertyColumn Property="i => i.Name" Sortable="true" />
    <PropertyColumn Property="i => i.Type" Sortable="true" />
    <PropertyColumn Property="i => i.Manufacturer" Sortable="true" />
    <PropertyColumn Property="i => i.Specifications" />
    <TemplateColumn Title="Price" Sortable="true" SortBy="GridSort<Item>.ByDescending(c => c.Price)" >
        $@context.Price
    </TemplateColumn>
    <Paginator State="paginationState" />
</QuickGrid>

@code {
    private PaginationState paginationState = new() { ItemsPerPage = 10 };

    public List<Item> ItemList { get; set; } = new();

    public List<Vendor> Vendors { get; set; } = new();

    [Parameter]
    [SupplyParameterFromQuery(Name = "vendor")]
    public int VendorId { get; set; }

    [Parameter]
    [SupplyParameterFromQuery(Name = "maxprice")]
    public int MaxPrice { get; set; }

    [Parameter]
    [SupplyParameterFromQuery(Name = "multivendor")]
    public bool HasMultilpleVendors { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();
        if (!IsPrerendering) 
        {
            Console.WriteLine("BEFORE VENDORS SET");
            if (Vendors.Count <= 0)
                Vendors = [.. await VendorRepository.FindAll()];
            if (MaxPrice <= 0)
                MaxPrice = 10000;

            Console.WriteLine("AFTER VENDORS SET");
            await UpdateItemList();
        }
    }

    private async Task UpdateItemList()
    {
        Console.ForegroundColor = ConsoleColor.Red;
        Console.WriteLine("EXPENSIVE DATABASE REQUEST");
        Console.ResetColor();

        ItemList = [.. await ItemRepository.FindByFilter(new() 
            {
                VendorId = VendorId > 0 ? VendorId : null,
                MaxPrice = MaxPrice > 0 ? MaxPrice : null,
                HasMultilpleVendors = HasMultilpleVendors ? HasMultilpleVendors : null
            }
        )];

        // if (VendorId <= 0)
        // {
        //     ItemWithQuantityList = [.. await ItemRepository.FindAll()];
        // }
        // else
        // {
        //     ItemWithQuantityList = [.. await ItemRepository.FindByVendor(VendorId)];
        // }
    }

    public void UpdateQuery(int vendorId)
    {
        Console.WriteLine($"FILTER BY VENDOR: {VendorId} -> {vendorId}");

        // TODO inconsistency
        if (HasMultilpleVendors && vendorId > 0)
            HasMultilpleVendors = false;

        // UpdateItemList() will be called, filtering accordingly
        NavigationManager.NavigateTo(
            NavigationManager.GetUriWithQueryParameters(
                new Dictionary<string, object?>()
                {
                    { "vendor", vendorId > 0 ? vendorId : null },
                    { "maxprice", MaxPrice > 0 ? MaxPrice : null },
                    { "multivendor", HasMultilpleVendors ? HasMultilpleVendors : null }
                }
            )
        );
    }

    // protected override async Task OnAfterRenderAsync(bool firstRender)
    // {
    //     if (firstRender)
    //     {
    //         Console.WriteLine("BEFORE VENDORS SET");
    //         Vendors = [.. await VendorRepository.FindAll()];
    //         Console.WriteLine("AFTER VENDORS SET");
    //     }

    //     await base.OnAfterRenderAsync(firstRender);
    // }
}
