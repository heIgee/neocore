@page "/item/{Id:int?}"

@inherits NeocoreComponent

@inject ItemRepository ItemRepository
@inject NavigationManager NavigationManager

<RoleGuard MinimumRole="UserRole.Editor">
    <div class="col col-md-6 me-auto">
        @if (Id is null)
        {
            <h3>Adding new Item</h3>
        }
        else
        {
            <h3>Updating Item #@Id</h3>
        }

        <div class="mb-2">
            <button class="btn text-white btn-info py-1" @onclick="Confirm">Confirm</button>
            @if (Id is not null)
            {
                <button class="btn text-white btn-danger py-1 ms-1" @onclick="Delete">Delete</button>
            }
        </div>

        @if (Item is not null)
        {
            <form novalidate>

                <label class="form-label" for="name">Name:</label>
                <input class="form-control mb-2" type="text" id="name" @bind-value="@Item.Name" />

                <label class="form-label" for="type">Type:</label> @* // TODO: restrict types to enum *@
                <input class="form-control mb-2" type="text" id="type" @bind-value="@Item.Type" />

                <label class="form-label" for="manufacturer">Manufacturer:</label>
                <input class="form-control mb-2" type="text" id="manufacturer" @bind-value="@Item.Manufacturer" />

                <label class="form-label" for="specifications">Specifications:</label>
                <input class="form-control mb-2" type="text" id="specifications" @bind-value="@Item.Specifications" />

                <label class="form-label" for="price">Price:</label>
                <input class="form-control mb-2" type="number" step="0.01" min="0" id="price" @bind-value="@Item.Price" />

            </form>

            ////
        }
    </div>
</RoleGuard>


@code {
    [Parameter]
    public int? Id { get; set; }

    public Item? Item { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        if (!IsPrerendering)
        {
            if (Id.HasValue)
            {
                Item = await ItemRepository.FindById(Id.Value);

                if (Item is null || !Item.Id.HasValue)
                {
                    // force load to ensure proper render (mere header otherwise)
                    NavigationManager.NavigateTo("/item", forceLoad: true);
                }
            }
            else
            {
                Item = new();
            }
        }

        await base.OnParametersSetAsync();
    }

    private async Task Confirm()
    {
        if (Item is null)
            return;

        if (Id.HasValue)
        {
            await ItemRepository.Update(Id.Value, Item);
        }
        else
        {
            await ItemRepository.Add(Item);
        }

        NavigationManager.NavigateTo("/items");
    }

    private async Task Delete()
    {
        if (Item is null || !Id.HasValue)
            return;

        await ItemRepository.Delete(Id.Value);
        NavigationManager.NavigateTo("/items");
    }
}
