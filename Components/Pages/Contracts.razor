@page "/contracts"

@inherits NeocoreComponent

@inject IContractRepository ContractRepository
@inject IVendorRepository VendorRepository
@inject NavigationManager Nav 

<div class="col col-md-6 me-auto">
    <FilterComponent 
        TEntity="Vendor" 
        SelectedId="VendorId"
        Entities="Vendors"
        EntityId="@(v => v.Id)"
        EntityName="@(v => v.Name)"
        OnEntityFilter="UpdateQuery"
        Label="By vendor:"
    />

    <label for="deliveryDateFrom">Delivery date from:</label>
    <input class="my-2 form-control" id="deliveryDateFrom" type="date" 
        @bind="DeliveryDateFrom" 
        @bind:event="oninput" 
        @onchange="() => UpdateQuery(VendorId)"
    />

    <label for="deliveryDateTo">Delivery date to:</label>
    <input class="mt-2 form-control" id="deliveryDateTo" type="date" 
        @bind="DeliveryDateTo" 
        @bind:event="oninput" 
        @onchange="() => UpdateQuery(VendorId)"
    />
</div>

<h3 class="mt-2">
    Contracts 
    <a href="/contract" class="btn btn-sm ms-2 py-1 btn-success">+ New</a>
</h3>

<QuickGrid class="nc-grid" Items="ContractList.AsQueryable()" Pagination="paginationState">
    <TemplateColumn class="nc-narrow" 
        Title="Id"
        SortBy="GridSort<ContractExtended>.ByAscending(c => c.Id)"
    >
        <a href="contract/@context.Id">@context.Id</a>
    </TemplateColumn>
    <TemplateColumn 
        Title="Delivery date" 
        SortBy="GridSort<ContractExtended>.ByDescending(c => c.DeliveryDate)"
    >
        @context.DeliveryDate
    </TemplateColumn>
    <TemplateColumn 
        Title="Signed with" 
        SortBy="GridSort<ContractExtended>.ByAscending(c => c.Vendor == null ? null : c.Vendor.Name)"
    >
        <a href="vendor/@context.Vendor?.Id">@context.Vendor?.Name</a>
    </TemplateColumn>
    <Paginator State="paginationState" />
</QuickGrid>

@code {
    private PaginationState paginationState = new() { ItemsPerPage = 10 };

    private List<ContractExtended> ContractList { get; set; } = new();

    public List<Vendor> Vendors { get; set; } = new();

    [Parameter]
    [SupplyParameterFromQuery(Name = "vendor")]
    public int VendorId { get; set; }

    [Parameter]
    [SupplyParameterFromQuery(Name = "from")]
    public DateOnly DeliveryDateFrom { get; set; }

    [Parameter]
    [SupplyParameterFromQuery(Name = "to")]
    public DateOnly DeliveryDateTo { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        if (!IsPrerendering)
        {
            if (DeliveryDateFrom == DateOnly.MinValue)
                DeliveryDateFrom = new DateOnly(2024, 01, 01);

            if (DeliveryDateTo == DateOnly.MinValue)
                DeliveryDateTo = new DateOnly(2025, 01, 01);

            if (Vendors.Count <= 0)
                Vendors = [.. await VendorRepository.FindAll()];

            await UpdateContracts();
        }

        await base.OnParametersSetAsync();
    }

    private async Task UpdateContracts()
    {
        ContractList = [.. await ContractRepository.FindByFilter(new()
            {
                VendorId = VendorId > 0 ? VendorId : null,
                DeliveryDateFrom = DeliveryDateFrom,
                DeliveryDateTo = DeliveryDateTo
            }
        )];
    }

    public void UpdateQuery(int vendorId)
    {
        Nav.NavigateTo(
            Nav.GetUriWithQueryParameters(
                new Dictionary<string, object?>() 
                { 
                    { "vendor", vendorId > 0 ? vendorId : null },
                    { "from", DeliveryDateFrom != DateOnly.MinValue ? DeliveryDateFrom : null },
                    { "to", DeliveryDateTo != DateOnly.MinValue ? DeliveryDateTo : null }
                }
            )
        );
    }
}
